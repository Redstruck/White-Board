import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Grid3X3,
  Undo,
  Redo,
  Download,
  Settings,
} from 'lucide-react';
import { Tooltip, TooltipContent, TooltipTrigger, TooltipProvider } from '@/components/ui/tooltip';

export default function TopBar({
  whiteboardName,
  onWhiteboardNameChange,
  onUndo,
  onRedo,
  onOpenGallery,
  onDownload,
  canUndo,
  canRedo,
}) {
  const [isEditingName, setIsEditingName] = useState(false);
  const [tempName, setTempName] = useState(whiteboardName);

  const handleNameEdit = () => {
    setIsEditingName(true);
    setTempName(whiteboardName);
  };

  const handleNameSave = () => {
    onWhiteboardNameChange(tempName);
    setIsEditingName(false);
  };

  const handleNameCancel = () => {
    setTempName(whiteboardName);
    setIsEditingName(false);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleNameSave();
    } else if (e.key === 'Escape') {
      handleNameCancel();
    }
  };

  return (
    <TooltipProvider>
      <div className="fixed top-0 left-0 right-0 bg-white border-b shadow-sm z-10">
        <div className="flex items-center justify-between px-4 py-2">
          <div className="flex items-center space-x-4">
            {/* Gallery button */}
            <Tooltip>
              <TooltipTrigger asChild>
                <Button variant="ghost" size="sm" onClick={onOpenGallery}>
                  <Grid3X3 className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <span>Gallery</span>
              </TooltipContent>
            </Tooltip>

            {/* Whiteboard name */}
            <div className="flex items-center">
              {isEditingName ? (
                <Input
                  value={tempName}
                  onChange={(e) => setTempName(e.target.value)}
                  onBlur={handleNameSave}
                  onKeyDown={handleKeyPress}
                  className="h-8 text-lg font-semibold border-none shadow-none focus:ring-1 focus:ring-blue-500"
                  autoFocus
                />
              ) : (
                <Button
                  variant="ghost"
                  onClick={handleNameEdit}
                  className="text-lg font-semibold hover:bg-gray-100 px-2"
                >
                  {whiteboardName}
                </Button>
              )}
            </div>
          </div>

          <div className="flex items-center space-x-2">
            {/* Undo/Redo */}
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onUndo}
                  disabled={!canUndo}
                >
                  <Undo className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <span>Undo (Ctrl+Z)</span>
              </TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onRedo}
                  disabled={!canRedo}
                >
                  <Redo className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <span>Redo (Ctrl+Y)</span>
              </TooltipContent>
            </Tooltip>

            {/* Download button */}
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  onClick={onDownload}
                  className="bg-blue-600 hover:bg-blue-700 text-white"
                  size="sm"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Download
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <span>Download as PNG</span>
              </TooltipContent>
            </Tooltip>
          </div>
        </div>
      </div>
    </TooltipProvider>
  );
}
